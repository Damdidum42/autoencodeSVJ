#include "H5Cpp.h"#include <string>#include <vector>#include <map>#include <iostream>using namespace std;using namespace H5;/* For this to work you'll need to install HDF5 together with the C++ API. On macOS, you can do that with brew:  `brew install hdf5`  Then, find where the HDF5 C++ API header and libs are located and build executable with:  g++ h5parser.C -o h5parser `root-config --libs` `root-config --cflags` -I/usr/local/Cellar/hdf5/1.12.0_1/include/ -L/usr/local/Cellar/hdf5/1.12.0_1/lib/ -lhdf5_cpp -lhdf5  */const string inputPath = "../../data/1500GeV_0p75/data_0_data.h5";vector<string> getLabels(Group group){  DataSet dataset = group.openDataSet("labels");    vector<string> labels;    if(dataset.getTypeClass() != H5T_STRING){    cout<<"ERROR -- labels should be of type string, but they are not"<<endl;    return labels;  }    DataSpace dataspace = dataset.getSpace();  StrType strType = dataset.getStrType();  hssize_t nPoints = dataspace.getSimpleExtentNpoints();  size_t size = strType.getSize();      char values[nPoints][size];  dataset.read(values, strType, dataspace);    for(int i=0; i<nPoints; i++){    string label = "";    for(int j=0; j<size; j++){      label += values[i][j];    }    labels.push_back(label);  }  return labels;}vector<map<string, double>> getValues(Group group, vector<string> labels){  DataSet dataset = group.openDataSet("data");    vector<map<string, double>> data;    if(dataset.getTypeClass() != H5T_FLOAT){    cout<<"ERROR -- data should be of type float, but they are not"<<endl;    return data;  }    DataSpace dataspace = dataset.getSpace();  FloatType floatType = dataset.getFloatType();  hssize_t nPoints = dataspace.getSimpleExtentNpoints();  size_t size = floatType.getSize();    cout<<"N points:"<<nPoints<<endl;  cout<<"Size:"<<size<<endl;      double values[nPoints][labels.size()];  dataset.read(values, floatType, dataspace);    for(int i=0; i<nPoints; i++){    map<string, double> valuesForEvent;    for(int j=0; j<labels.size(); j++){      valuesForEvent[labels.at(j)] = values[i][j];    }    data.push_back(valuesForEvent);  }  return data;}void printEvent(map<string, double> event){  for(auto &[name, value] : event){    cout<<name<<":\t"<<value<<endl;  }}class Event{public:  Event();    double MET, METeta, METphi, MT, Mjj;    private:  };int main (void){    // Open the specified file and the specified dataset in the file.  H5File file(inputPath.c_str(), H5F_ACC_RDONLY);  Group rootGroup = file.openGroup("/");  Group eventFeaturesGroup = rootGroup.openGroup("event_features");      vector<string> eventFeaturesLabels = getLabels(eventFeaturesGroup);  cout<<"Event features:"<<endl;  for(string label : eventFeaturesLabels){    cout<<label<<"\t";  }  cout<<endl;      vector<map<string, double>> data = getValues(eventFeaturesGroup, eventFeaturesLabels);      int iEvent = 10;  printEvent(data[iEvent]);        return 0;}