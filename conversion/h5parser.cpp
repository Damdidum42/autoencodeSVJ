#include "H5Cpp.h"#include <string>#include <vector>#include <map>#include <iostream>using namespace std;using namespace H5;/* For this to work you'll need to install HDF5 together with the C++ API. On macOS, you can do that with brew:  `brew install hdf5`  Then, find where the HDF5 C++ API header and libs are located and build executable with:  g++ h5parser.C -o h5parser `root-config --libs` `root-config --cflags` -I/usr/local/Cellar/hdf5/1.12.0_1/include/ -L/usr/local/Cellar/hdf5/1.12.0_1/lib/ -lhdf5_cpp -lhdf5  */const string inputPath = "../../data/1500GeV_0p75/data_0_data.h5";class Jet{public:  Jet(){}  Jet(vector<double> _EFPs) : EFPs(_EFPs) {}    vector<double> EFPs;    void print(){    cout<<"Jet:"<<endl;    cout<<"\tEFPs:";    for(double EFP : EFPs) cout<<EFP<<"\t";    cout<<endl;  }};class Event{public:  Event(){}    Event(double _MET, double _METeta, double _METphi, double _MT, double _Mjj) :  MET(_MET), METeta(_METeta), METphi(_METphi), MT(_MT), Mjj(_Mjj) {}    double MET, METeta, METphi, MT, Mjj;    vector<shared_ptr<Jet>> jets;    void print(){    cout<<"Event:"<<endl;    cout<<"\tMET: "<<MET<<"\tMETeta: "<<METeta<<"\tMETphi: "<<METphi;    cout<<"\tMT: "<<MT<<"\tMjj: "<<Mjj<<endl;    cout<<"\tJets:"<<endl;    for(auto jet : jets) jet->print();  }};vector<string> getLabels(Group group){  DataSet dataset = group.openDataSet("labels");    vector<string> labels;    if(dataset.getTypeClass() != H5T_STRING){    cout<<"ERROR -- labels should be of type string, but they are not"<<endl;    return labels;  }    DataSpace dataspace = dataset.getSpace();  StrType strType = dataset.getStrType();  hssize_t nPoints = dataspace.getSimpleExtentNpoints();  size_t size = strType.getSize();      char values[nPoints][size];  dataset.read(values, strType, dataspace);    for(int i=0; i<nPoints; i++){    string label = "";    for(int j=0; j<size; j++){      label += values[i][j];    }        label.erase(remove(label.begin(), label.end(), '\0'), label.end());    labels.push_back(label);  }  return labels;}vector<shared_ptr<Event>> getValues(Group groupEvent, Group groupEFPs){  vector<shared_ptr<Event>> events;  // Initialize events with global features  DataSet datasetEvent = groupEvent.openDataSet("data");  if(datasetEvent.getTypeClass() != H5T_FLOAT){    cout<<"ERROR -- data should be of type float, but they are not"<<endl;    return events;  }    DataSpace dataspaceEvent = datasetEvent.getSpace();  FloatType floatTypeEvent = datasetEvent.getFloatType();    hsize_t dimEvent[2];  dataspaceEvent.getSimpleExtentDims(dimEvent, NULL);    double values[dimEvent[0]][dimEvent[1]];  datasetEvent.read(values, floatTypeEvent, dataspaceEvent);    for(int i=0; i<dimEvent[0]; i++){    auto event = make_shared<Event>();        event->MET    = values[i][0];    event->METeta = values[i][1];    event->METphi = values[i][2];    event->MT     = values[i][3];    event->Mjj    = values[i][4];        events.push_back(event);  }      // Add jets with their EFPs to events    DataSet datasetEFPs = groupEFPs.openDataSet("data");  if(datasetEFPs.getTypeClass() != H5T_FLOAT){    cout<<"ERROR -- data should be of type float, but they are not"<<endl;    return events;  }    DataSpace dataspaceEFPs = datasetEFPs.getSpace();  hsize_t dim[3];  dataspaceEFPs.getSimpleExtentDims(dim, NULL);  hsize_t memdim = dim[0] * dim[1] * dim[2];  vector<float> valuesEFP(memdim);  datasetEFPs.read(valuesEFP.data(), PredType::NATIVE_FLOAT, dataspaceEFPs, dataspaceEFPs);      vector<vector<vector<float>>> efpData;    for(int iEvent=0; iEvent<dim[0]; iEvent++){    for(int iJet=0; iJet<dim[1]; iJet++){      auto jet = make_shared<Jet>();            vector<double> variablesForJet;            for(int iVar=0; iVar<dim[2]; iVar++){        variablesForJet.push_back(valuesEFP[iEvent*dim[1]*dim[2] + iJet*dim[2] + iVar]);      }      jet->EFPs = variablesForJet;      events.at(iEvent)->jets.push_back(jet);    }  }    return events;}int main (void){  // Open H5 file, get data groups  H5File file(inputPath.c_str(), H5F_ACC_RDONLY);  Group rootGroup = file.openGroup("/");  Group eventFeaturesGroup = rootGroup.openGroup("event_features");  Group jetEFPsGroup = rootGroup.openGroup("jet_eflow_variables");    // Optionally, one can read data labels  vector<string> eventFeaturesLabels = getLabels(eventFeaturesGroup);  vector<string> jetEFPsLabels = getLabels(jetEFPsGroup);  cout<<"EFPs:"<<endl;  for(string label : jetEFPsLabels) cout<<label<<"\t";  cout<<endl;    // Load data into vector of events  vector<shared_ptr<Event>> events = getValues(eventFeaturesGroup, jetEFPsGroup);    // Print some events for a cross-check  events[10]->print();    return 0;}