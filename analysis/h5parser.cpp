#include "Helpers.hpp"#include "EventProcessor.hpp"/* For this to work you'll need to install HDF5 together with the C++ API. On macOS, you can do that with brew:  `brew install hdf5`  Then, find where the HDF5 C++ API header and libs are located and build executable with:  g++ h5parser.C -o h5parser `root-config --libs` `root-config --cflags` -I/usr/local/Cellar/hdf5/1.12.0_1/include/ -L/usr/local/Cellar/hdf5/1.12.0_1/lib/ -lhdf5_cpp -lhdf5  */const string inputPath = "../../data/1500GeV_0p75/data_0_data.h5";int main (int argc, char** argv){  auto eventProcessor = make_unique<EventProcessor>();      // Open H5 file, get data groups  H5File file(inputPath.c_str(), H5F_ACC_RDONLY);  Group rootGroup = file.openGroup("/");  Group eventFeaturesGroup  = rootGroup.openGroup("event_features");  Group jetEFPsGroup        = rootGroup.openGroup("jet_eflow_variables");  Group jetFeaturesGroup    = rootGroup.openGroup("jet_features");    // Optionally, one can read data labels  vector<string> eventFeaturesLabels = eventProcessor->getLabels(eventFeaturesGroup);  vector<string> jetEFPsLabels = eventProcessor->getLabels(jetEFPsGroup);  cout<<"EFPs:"<<endl;  for(string label : jetEFPsLabels) cout<<label<<"\t";  cout<<endl;    // Load data into vector of events  vector<shared_ptr<Event>> events = eventProcessor->getValues(eventFeaturesGroup, jetEFPsGroup, jetFeaturesGroup);    // Print some events for a cross-check  events[10]->print();    TApplication theApp("App",&argc, argv);    TH1D *histMet = new TH1D("MET", "MET", 100, 0, 10000);    for(auto event : events){    histMet->Fill(event->MET);  }      TCanvas *canvas = new TCanvas("canvas", "canvas", 800, 600);    canvas->cd();  histMet->Draw();    canvas->Update();  theApp.Run();    return 0;}